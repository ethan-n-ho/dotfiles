{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"logging.debug": {
		"prefix": "logging.debug",
		"body": [
			"logging.debug(f\"$1: {$1}\")"
		],
		"description": "Log at debug level"
	},
	"breakpoint": {
		"prefix": "breakpoint",
		"body": ["breakpoint()"],
		"description": "breakpoint (>=3.7)"
	},
	"env": {
		"prefix": [
			"shebang",
			"env",
			"#!"
		],
		"body": [
			"#!/usr/bin/env python"
		],
		"description": "Set default enviroment shebang"
	},
	"env2": {
		"prefix": [
			"env2",
			"#!2"
		],
		"body": [
			"#!/usr/bin/env python2"
		],
		"description": "Set shebang for Python 2"
	},
	"env3": {
		"prefix": [
			"env3",
			"#!3"
		],
		"body": [
			"#!/usr/bin/env python3"
		],
		"description": "Set shebang for Python 3"
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${1:name}(object):",
			"    \"\"\"${0:description}\"\"\"\n",
			"    def __init__(self):",
			"        # super(${1:name}, self).__init__()\n",
		],
		"description": "Create new class"
	},
	"attr.s": {
		"prefix": "@attr.s",
		"body": [
			"@attr.s",
			"class ${1:name}:",
			"    \"\"\"${0:description}\"\"\"\n",
			"    foo = attr.ib(type=str, default='bar')\n",
		],
		"description": "Create new attr class"
	},
	"entrypoint": {
		"prefix": "if __name__",
		"body": [
			"if __name__ == '__main__':",
			"    pass",
		],
		"description": "Script entrypoint"
	},
	"function": {
		"prefix": ["def", "function"],
		"body": [
			"def ${1:function}(${2:arg}):",
			"    \"\"\"${3:description}\"\"\"",
			"    pass",
		],
		"description": "New function"
	},
	"method": {
		"prefix": "method",
		"body": [
			"def ${1:method}(self, ${2:arg}):",
			"    \"\"\"${3:description}\"\"\"",
			"    pass",
		],
		"description": "New method"
	},
	"logging config": {
		"prefix": "logging.basicConfig",
		"body": [
			"import logging",
			"logging.basicConfig(level=logging.DEBUG)"
		],
		"description": "New method"
	},
	"fixture": {
		"prefix": "fixture",
		"body": [
			"@pytest.fixture",
			"def ${1:function}(${2:arg}):",
			"    \"\"\"${3:description}\"\"\"",
			"    pass",
		],
		"description": "New pytest fixture"
	},
	"argparse": {
		"prefix": [
			"argparse",
			"ArgumenParser",
		],
		"body": [
			"def ${1:get_opts}() -> dict:",
			"    \"\"\"Get options from command line\"\"\"",
			"    import argparse",
			"    parser = argparse.ArgumentParser(description=\"\")",
			"    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", required=False, help=\"\")",
			"    # parser.add_argument('file', type=argparse.FileType('r'), help=\"\")",
			"    parser.add_argument(\"-f\", \"--foobar\", type=str, required=False, help=\"\")",
			"    return vars(parser.parse_args())"
		],
		"description": "New argparse.ArgumentParser"
	},
	// https://github.com/NexSabre/vscode-python-snippets/blob/master/snippets/snippets.json
}